package 자바용어및연산정리;

public class 자바용어정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 *  블록단위 주석  = /* 기호사용 
		 *  블록단위 주석 사이에 /* 이 등장하면 안된다. 경계분에문제생
		 */
		
		/* 행단위 주석
		 *  주석처리해야 할 문장이 하나나 둘이라면 //<-- 행단위주석사
		 */
		
		
		/* 상수 
		 *  값이 변하지 않는수
		 *  한번 그 값이 정해지면 이후로는 변경이 불가능
		 *  변수앞에 final이라는 선언추가하면 그변수는 상수가된다.
		 *  상수 선언만하고 값 할당하지않으면 한 번은 값을 할당할수있다.
		 *  상수 이름은 대문자로 짓는다 , 둘이상의 단어로 이뤄지면 단어사이에 _를 넣는다.
		 */
		
		
		 /* if문과 if~ else문
		  * if 오른쪽 소괄호에는 true 아니면 false가 오게 되어있다.
		  * 이 위치에 true가 오면 이어서 등장하는 중괄호의 내부가실행된다.
		  * false가 등장하면 이부분 건너뜀
		  * 
		  * if~else = true가오면	if절을  false가오면 else절을 실행 
		  */
		
		
		/* if~ elseif ~else
		 *  여러문장중에서 조건에따라 하나의 문장만 실행하고 싶다면 사용
		 *  맨위 if문에서부터 조건 검사하며 내려옴 
		 *  조건이 true인 부분을 만나면 해당 부분에 속하 문장 실행하고 나머지 건너뜀
		 *  마지막까지 true인 부분을 만나지 못하면 마지막에 위치한 else에 속한 문장실
		 */
		
		
		/* if~else문과 유사한 성격의 조건 연산자
		 *  기호 ?의 왼편이 true이면 : 의 왼편에 있는 수가 반환된다.
		 *  기호 ?의 왼편이	false이면 : 의  오른편에 있는수가 반환된다.
		 */
		
		
		/* switch와 break
		 *	조건에 따라 실행할 문장을 구분
		 * if~  elseif ~else문과 유사
		 * else if 가 많이 들어가는 상황에서는 switch문이 더 좋은 선택이다
		 * 키워드 case와 default를 가리켜 레이블이라한다.
		 * 들여쓰기 대상 제외
		 *  
		 *
		 */
		
		
		/* switch문 + break문: switch문의 일반적인 사용모델
		 *	switch문에서 2가전달되면 case2로 이동해서 실행을 이어간다
		 * 그러다 break문을 만나면 switch문을 벗어나게된다.
		 * 결과적으로 case2가 구성한 영역만 실행
		 * 
		 */
		
		
		
		/* for, while 그리고 do~while
		 * 조건에 따른 코드의 반복적실행 위한것
		 * while문의 소괄호에는 반복의 조건을 명시
		 * true또는 false가 와야하므로 이를 반환하는 연산이 오게된다.
		 * 
		 * 먼저! 조건검사
		 * 그리고 	결과가 true이면 중괄호 영역실행
		 * 
		 * 조건검사가 먼저 진행되기때문에 처음부터 false가 반환되면 while문의 중괄호는 실행안될수 있음
		 * true만 반환되면 while문을 벗어나지 못하는 문제 발생할수있다.
		 * 
		 */
		
		
		
		/* do~while 문
		 * while문은 '선검사' 방식이고 do~while문은 '후검사' 방식
		 * while문으로 작성된 문장은 do~while문으로도 작성 가능하고 또 반대로가능하다.
		 * 조건에 따른 반복이 필요하다 . 근데 반드시 한 버는 실행을 해야한다.
		 * 
		 */
		
		
		/* for문 
		 *  반복의 횟수가 정해져 있는 상황에서는 for문을 사용
		 *   정해진 횟수의 반복을 위해사용
		 *   
		 *   1.반복의 횟수를 세기위한 변수 , 2.반복의조건 3. 반복의 조건을 무너뜨리기위한 연산 
		 *   
		 */
		
		
		
		/* break & continue
		 * 실행 흐름의 조절을 목적으로 반복문 내에 삽입
		 * 
		 * break문은 마찬가지로 반복문을 빠져나가는 용도로도 사용
		 * 보통if문과 함께 사용되어 특정 조건이 만족 될때 이를 감싸는 반복문을 빠져나가도록 구성
		 * 
		 * continue문은 반복문의 탈출과 거리가 멀다.
		 * 실행하던 반복문의 나머지 부분을 생략하고 프록램의 흐름을 조건검사부분으로 이동시킨다.
		 */
		
		
		/*  무한루프와 break
		 *반복의 조건이 true로 명시되어 해당 반복문을 빠져나가지 못하도록 구성된 반복문
		 * 
		 *
		 */
		
		
		/* 반복문의 중첩
		 * 가장 흔히 사용하는 for문의  중첩, 그리고while문의 주엋ㅂ을 대상으로 하는 반복문의 중첩있다.
		 * 
		 * 활용도 높고 이해하기 좋은것 for문 중첩
		 * 
		 * ex: for (int i = 1; 1 < 10; i++){  for문 바깥쪽 가로
		 * 		for(int j = 2; 2<10; j++)	 	for문 안쪽 세로
		 */  
		
		
		/*메소드
		 * 메소드 호출시 전달되는 값을 받기위해 선언된 변수를 가리켜 매게변수라한다.
		 * 
		 * 메소드 호출시 선언되어 , 전달되는 값을 저장한다.
		 * 메개변수가 선언된 메소드 내에서만 유효한 변수이다.
		 * 
		 * 
		 */
		
		
		/* 키워드 return
		 * 값을 반환해라. addResult에 저장된값을 반환해라.
		 * 
		 * 메소드 호출한 영역으로 값을 반환(의미)
		 * 메소드의 종료 (의미)
		 * 
		 */
	}

}
